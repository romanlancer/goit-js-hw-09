{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","addEventListener","definePromise","positionInputValue","delayInputValue","firstDelayInputValue","e","preventDefault","elements","currentTarget","delay","step","amount","Number","value","generatePromises","i","createPromise","then","position","console","log","catch","init","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","target","reset"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,SAAUC,GAEhC,IAAIC,EAAqB,KACrBC,EAAkB,KAClBC,EAAuB,KAE3B,SAASH,EAAcI,GACrBA,EAAEC,iBAEI,MAAA,SAAEC,GAAaF,EAAEG,eAEjB,MAAEC,EAAF,KAASC,EAAT,OAAeC,GAAWJ,EAChCL,EAAqBU,OAAOD,EAAOE,OACnCV,EAAkBS,OAAOF,EAAKG,OAC9BT,EAAuBQ,OAAOH,EAAMI,OAM3BC,SAAiBZ,GACnB,IAAA,IAAIa,EAAI,EAAGA,EAAIb,EAAoBa,IACtCC,IACGC,KAAK,EAAGC,SAAAA,EAAUT,MAAAA,MACjBU,QAAQC,2BAA2BF,QAAeT,SAEnDY,MAAM,EAAGH,SAAAA,EAAUT,MAAAA,MAClBU,QAAQC,0BAA0BF,QAAeT,SAGnDa,IAAAA,EAAO,KAEFN,SAAAA,IACDO,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACLN,EACFI,EAAQ,CACNT,SAAWI,GAAQ,EACnBb,MAAQL,GAAwBD,IAGlCyB,EAAO,CACLV,SAAWI,GAAQ,EACnBb,MAAQL,GAAwBD,KAGlCC,GAAwBD,KAhBhCC,EAAuBQ,OAAOH,EAAMI,OAftCC,CAAiBZ,GAEjBG,EAAEyB,OAAOC","file":"03-promises.d6d4341a.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n\nform.addEventListener('submit', definePromise);\n\nlet positionInputValue = null;\nlet delayInputValue = null;\nlet firstDelayInputValue = null;\n\nfunction definePromise(e) {\n  e.preventDefault();\n\n  const { elements } = e.currentTarget;\n\n  const { delay, step, amount } = elements;\n  positionInputValue = Number(amount.value);\n  delayInputValue = Number(step.value);\n  firstDelayInputValue = Number(delay.value);\n\n  generatePromises(positionInputValue);\n\n  e.target.reset();\n\n  function generatePromises(positionInputValue) {\n    for (let i = 0; i < positionInputValue; i++) {\n      createPromise()\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n    let init = null;\n    firstDelayInputValue = Number(delay.value);\n    function createPromise() {\n      const shouldResolve = Math.random() > 0.3;\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (shouldResolve) {\n            resolve({\n              position: (init += 1),\n              delay: (firstDelayInputValue += delayInputValue),\n            });\n          } else {\n            reject({\n              position: (init += 1),\n              delay: (firstDelayInputValue += delayInputValue),\n            });\n          }\n        }, (firstDelayInputValue += delayInputValue));\n      });\n    }\n  }\n}\n"]}