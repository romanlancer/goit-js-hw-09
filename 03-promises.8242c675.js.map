{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","addEventListener","definePromise","positionInputValue","delayInputValue","firstDelayInputValue","finalValue","e","preventDefault","elements","currentTarget","delay","step","amount","Number","value","console","log","target","reset","createPromise","then","position","catch","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,SAAUC,GAChC,IAAIC,EAAqB,KACrBC,EAAkB,KAClBC,EAAuB,KACvBC,EAAa,KACjB,SAASJ,EAAcK,GACrBA,EAAEC,iBAEI,MAAA,SAAEC,GAAaF,EAAEG,eAEjB,MAAEC,EAAF,KAASC,EAAT,OAAeC,GAAWJ,EAChCN,EAAqBW,OAAOD,EAAOE,OACnCX,EAAkBU,OAAOF,EAAKG,OAC9BV,EAAuBS,OAAOH,EAAMI,OACpCT,EAAaQ,OAAOT,GAAwBS,OAAOV,GACnDY,QAAQC,IAAIX,GAMZC,EAAEW,OAAOC,QAETC,IACGC,KAAK,EAAGC,SAAAA,EAAUX,MAAAA,MACjBK,QAAQC,2BAA2BK,QAAeX,SAEnDY,MAAM,EAAGD,SAAAA,EAAUX,MAAAA,MAClBK,QAAQC,0BAA0BK,QAAeX,SAGrDS,EAAchB,GAGhB,SAASgB,EAAcE,EAAUX,EAAOP,GAChCoB,MAAAA,EAAgBC,KAAKC,SAAW,GAChCC,EAAU,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACLP,EACFK,EAAQ,CAAEP,SAAUnB,EAAoBQ,MAAOL,IAE/CwB,EAAO,CAAER,SAAUnB,EAAoBQ,MAAOL,KAE/CF,KAELY,QAAQC,IAAIU","file":"03-promises.8242c675.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n// form.addEventListener('submit', createPromise);\nform.addEventListener('submit', definePromise);\nlet positionInputValue = null;\nlet delayInputValue = null;\nlet firstDelayInputValue = null;\nlet finalValue = null;\nfunction definePromise(e) {\n  e.preventDefault();\n\n  const { elements } = e.currentTarget;\n\n  const { delay, step, amount } = elements;\n  positionInputValue = Number(amount.value);\n  delayInputValue = Number(step.value);\n  firstDelayInputValue = Number(delay.value);\n  finalValue = Number(firstDelayInputValue) + Number(delayInputValue);\n  console.log(finalValue);\n  // console.log(`Login: ${step.value}, Password: ${amount.value}`);\n  // pos = value;\n  // am = value1;\n  // console.log(pos);\n  // console.log(am);\n  e.target.reset();\n\n  createPromise()\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n  createPromise(delayInputValue);\n}\n\nfunction createPromise(position, delay, delayInputValue) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: positionInputValue, delay: finalValue });\n      } else {\n        reject({ position: positionInputValue, delay: finalValue });\n      }\n    }, delayInputValue);\n  });\n  console.log(promise);\n}\n"]}