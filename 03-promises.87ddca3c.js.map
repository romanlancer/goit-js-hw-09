{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","addEventListener","definePromise","amountValue","delayTime","firstDelayInputValue","e","preventDefault","elements","currentTarget","delay","step","amount","Number","value","generatePromises","position","i","createPromise","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","then","console","log","catch","target","reset"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,SAAUC,GAEhC,IAAIC,EAAc,KACdC,EAAY,KACZC,EAAuB,KAE3B,SAASH,EAAcI,GACrBA,EAAEC,iBAEI,MAAA,SAAEC,GAAaF,EAAEG,eAEjB,MAAEC,EAAF,KAASC,EAAT,OAAeC,GAAWJ,EAChCL,EAAcU,OAAOD,EAAOE,OAC5BV,EAAYS,OAAOF,EAAKG,OACxBT,EAAuBQ,OAAOH,EAAMI,OAM3BC,SAAiBZ,EAAaE,GACjCW,IAAAA,EAAW,KAEV,IAAA,IAAIC,EAAI,EAAGA,EAAId,EAAac,IAAK,CAe3BC,SAAAA,EAAcF,EAAUZ,GACzBe,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACLN,EACFI,EAAQ,CAAEP,SAAAA,EAAUZ,UAAAA,IAEpBoB,EAAO,CAAER,SAAAA,EAAUZ,UAAAA,KAEpBC,KAvBHY,EAAI,IACNZ,GAAwBD,GAK1Bc,EAFAF,GAAY,EAEYX,GACrBqB,KAAK,EAAGV,SAAAA,EAAUZ,UAAAA,MACjBuB,QAAQC,2BAA2BZ,QAAeZ,SAEnDyB,MAAM,EAAGb,SAAAA,EAAUZ,UAAAA,MAClBuB,QAAQC,0BAA0BZ,QAAeZ,UAnBzDW,CAAiBZ,EAAaE,GAE9BC,EAAEwB,OAAOC","file":"03-promises.87ddca3c.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n\nform.addEventListener('submit', definePromise);\n\nlet amountValue = null;\nlet delayTime = null;\nlet firstDelayInputValue = null;\n\nfunction definePromise(e) {\n  e.preventDefault();\n\n  const { elements } = e.currentTarget;\n\n  const { delay, step, amount } = elements;\n  amountValue = Number(amount.value);\n  delayTime = Number(step.value);\n  firstDelayInputValue = Number(delay.value);\n\n  generatePromises(amountValue, firstDelayInputValue);\n\n  e.target.reset();\n\n  function generatePromises(amountValue, firstDelayInputValue) {\n    let position = null;\n\n    for (let i = 0; i < amountValue; i++) {\n      if (i > 0) {\n        firstDelayInputValue += delayTime;\n      }\n\n      position += 1;\n      // delayTime += firstDelayInputValue\n      createPromise(position, firstDelayInputValue)\n        .then(({ position, delayTime }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delayTime}ms`);\n        })\n        .catch(({ position, delayTime }) => {\n          console.log(`❌ Rejected promise ${position} in ${delayTime}ms`);\n        });\n\n      function createPromise(position, delayTime) {\n        const shouldResolve = Math.random() > 0.3;\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (shouldResolve) {\n              resolve({ position, delayTime });\n            } else {\n              reject({ position, delayTime });\n            }\n          }, firstDelayInputValue);\n        });\n      }\n    }\n  }\n}\n"]}